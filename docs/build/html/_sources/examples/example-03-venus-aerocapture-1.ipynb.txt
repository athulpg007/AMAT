{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example - 03 - Venus Aerocapture: Part 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this example, you will learn to create a vehicle object in AMAT and simulate its aerocapture trajectory in the Venusian atmosphere. \n",
    "\n",
    "For reference, we will re-create a few results from the paper \"Craig and Lyne, Parametric Study of Aerocapture for Missions to Venus, Journal of Spacecraft and Rockets, Vol. 42, No. 6., 2005. DOI:10.2514/1.2589"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us re-use the code from example-01, 02 to create a planet object for Venus and add an atmosphere model. In addition to Planet, import the Vehicle class from AMAT for this example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from AMAT.planet import Planet\n",
    "from AMAT.vehicle import Vehicle\n",
    "\n",
    "# Create a planet object\n",
    "planet=Planet(\"VENUS\")    \n",
    "\n",
    "# Load an nominal atmospheric profile with height, temp, pressure, density data\n",
    "planet.loadAtmosphereModel('../atmdata/Venus/venus-gram-avg.dat', 0 , 1 ,2, 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a vehicle object flying in the target planet atmosphere.\n",
    "# with params m = 300 kg, beta = 78.0, L/D = 0.35, A = 3.1416, AoA = 0, RN = 1.54\n",
    "\n",
    "# These values are taken from the reference article mentioned above.\n",
    "vehicle=Vehicle('Apollo', 300.0, 78.0, 0.35, 3.1416, 0.0, 1.54, planet)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set initial conditions for the vehicle at atmospheric entry interface."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# h0 = 180 km, LON = 0 deg, LAT = 0 deg\n",
    "# v0 = 12 km/s, HDG = 0 deg, FPA = 0 deg\n",
    "# DOWNRANGE0 = 0 deg, HEATLOAD0 = 0.\n",
    "\n",
    "# See help(vehicle) for more details.\n",
    "vehicle.setInitialState(180.0,0.0,0.0,12.0,0.0,-4.5,0.0,0.0)\n",
    "\n",
    "# Set solver tolerance = 1E-6 (recommended value)\n",
    "# Setting this too low can result in long execution times.\n",
    "vehicle.setSolverParams(1E-6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute the overshoot and undershoot limit EFPA\n",
    "\n",
    "# Set max. propogation time = 2400.0 secs.\n",
    "# Set max. time step = 0.1 sec.\n",
    "# Set low value for guess = -80.0 deg\n",
    "# Set high value for guess = -4.0 deg\n",
    "# Set EFPA tolerance = 1E-10 (recommended)\n",
    "# Set target apoapsis = 407 km\n",
    "\n",
    "# This calculation migt take a couple of minutes. Hang on!\n",
    "overShootLimit, exitflag_os  = vehicle.findOverShootLimit (2400.0,0.1,-80.0,-4.0,1E-10,407.0)\n",
    "underShootLimit,exitflag_us  = vehicle.findUnderShootLimit(2400.0,0.1,-80.0,-4.0,1E-10,407.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0\n",
      "1.0\n"
     ]
    }
   ],
   "source": [
    "# exitflag_os and exitflag_us will be set to 1 if a solution was found. Otherwise, it will be 0.\n",
    "print(exitflag_os)\n",
    "print(exitflag_us)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overshoot  limit : -7.0519 deg\n",
      "Undershoot limit : -9.4396 deg\n"
     ]
    }
   ],
   "source": [
    "# print the overshoot and undershoot limits we just computed.\n",
    "print(\"Overshoot  limit : \"+str('{:.4f}'.format(overShootLimit))+ \" deg\")\n",
    "print(\"Undershoot limit : \"+str('{:.4f}'.format(underShootLimit))+ \" deg\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These are the limiting flight path angles for our vehicle at Venus. Let us now calculate these trajectories, and their associated deceleration and heating profiles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n",
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n",
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n",
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 234x234 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n",
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n",
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n",
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 234x234 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n",
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n",
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n",
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 234x234 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import rcParams\n",
    "\n",
    "# Reset initial conditions and propogate overshoot trajectory\n",
    "vehicle.setInitialState(180.0,0.0,0.0,12.0,0.0,overShootLimit,0.0,0.0)\n",
    "vehicle.propogateEntry (2400.0,0.1,180.0)\n",
    "\n",
    "# Extract and save variables to plot\n",
    "t_min_os         = vehicle.t_minc\n",
    "h_km_os          = vehicle.h_kmc\n",
    "acc_net_g_os     = vehicle.acc_net_g\n",
    "q_stag_con_os    = vehicle.q_stag_con\n",
    "q_stag_rad_os    = vehicle.q_stag_rad\n",
    "\n",
    "# Reset initial conditions and propogate undershoot trajectory\n",
    "vehicle.setInitialState(180.0,0.0,0.0,12.0,0.0,underShootLimit,0.0,0.0)\n",
    "vehicle.propogateEntry (2400.0,0.1,0.0)\n",
    "\n",
    "# Extract and save variable to plot\n",
    "t_min_us         = vehicle.t_minc\n",
    "h_km_us          = vehicle.h_kmc\n",
    "acc_net_g_us     = vehicle.acc_net_g\n",
    "q_stag_con_us    = vehicle.q_stag_con\n",
    "q_stag_rad_us    = vehicle.q_stag_rad\n",
    "\n",
    "'''\n",
    "Create fig #1 - altitude history of aerocapture maneuver\n",
    "'''\n",
    "\n",
    "fig = plt.figure()\n",
    "fig.set_size_inches([3.25,3.25])\n",
    "plt.rc('font',family='Times New Roman')\n",
    "params = {'mathtext.default': 'regular' }          \n",
    "plt.rcParams.update(params)\n",
    "plt.plot(t_min_os , h_km_os, linestyle='solid' , color='xkcd:blue',linewidth=2.0,  label='Overshoot')\n",
    "plt.plot(t_min_us , h_km_us, linestyle='solid' , color='xkcd:green',linewidth=2.0,  label='Undershoot')\n",
    "\n",
    "plt.xlabel('Time, min',fontsize=10)\n",
    "plt.ylabel(\"Altitude, km\",fontsize=10)\n",
    "\n",
    "ax = plt.gca()\n",
    "ax.tick_params(direction='in')\n",
    "ax.yaxis.set_ticks_position('both')\n",
    "ax.xaxis.set_ticks_position('both')\n",
    "plt.tick_params(direction='in')\n",
    "plt.tick_params(axis='x',labelsize=10)\n",
    "plt.tick_params(axis='y',labelsize=10)\n",
    "\n",
    "plt.legend(loc='lower right', fontsize=8)\n",
    "\n",
    "\n",
    "plt.savefig('../plots/craig-lyne-altitude.png',bbox_inches='tight')\n",
    "plt.savefig('../plots/craig-lyne-altitude.pdf', dpi=300,bbox_inches='tight')\n",
    "plt.savefig('../plots/craig-lyne-altitude.eps', dpi=300,bbox_inches='tight')\n",
    "\n",
    "plt.show()\n",
    "\n",
    "fig = plt.figure()\n",
    "fig.set_size_inches([3.25,3.25])\n",
    "plt.rc('font',family='Times New Roman')\n",
    "plt.plot(t_min_os , acc_net_g_os, linestyle='solid' , color='xkcd:blue',linewidth=1.0,  label='Overshoot')\n",
    "plt.plot(t_min_us , acc_net_g_us, linestyle='solid' , color='xkcd:green',linewidth=1.0,  label='Undershoot')\n",
    "\n",
    "plt.xlabel('Time, min',fontsize=10)\n",
    "plt.ylabel(\"Deceleration, Earth g\",fontsize=10)\n",
    "\n",
    "ax = plt.gca()\n",
    "ax.tick_params(direction='in')\n",
    "ax.yaxis.set_ticks_position('both')\n",
    "ax.xaxis.set_ticks_position('both')\n",
    "plt.tick_params(direction='in')\n",
    "plt.tick_params(axis='x',labelsize=10)\n",
    "plt.tick_params(axis='y',labelsize=10)\n",
    "\n",
    "plt.legend(loc='upper right', fontsize=8)\n",
    "\n",
    "\n",
    "plt.savefig('../plots/craig-lyne-deceleration.png',bbox_inches='tight')\n",
    "plt.savefig('../plots/craig-lyne-deceleration.pdf', dpi=300,bbox_inches='tight')\n",
    "plt.savefig('../plots/craig-lyne-deceleration.eps', dpi=300,bbox_inches='tight')\n",
    "\n",
    "plt.show()\n",
    "\n",
    "fig = plt.figure()\n",
    "fig.set_size_inches([3.25,3.25])\n",
    "plt.rc('font',family='Times New Roman')\n",
    "plt.plot(t_min_os , q_stag_con_os, linestyle='solid' , color='xkcd:blue',linewidth=1.0,  label='Overshoot convective')\n",
    "plt.plot(t_min_os , q_stag_rad_os, linestyle='solid' , color='xkcd:red',linewidth=1.0,  label='Overshoot radiative')\n",
    "plt.plot(t_min_us , q_stag_con_us, linestyle='solid' , color='xkcd:magenta',linewidth=1.0,  label='Undershoot convective')\n",
    "plt.plot(t_min_us , q_stag_rad_us, linestyle='solid' , color='xkcd:green',linewidth=1.0,  label='Undershoot radiative')\n",
    "\n",
    "plt.xlabel('Time, min',fontsize=10)\n",
    "plt.ylabel(\"Stagnation-point heat rate, \"+r'$W/cm^2$',fontsize=10)\n",
    "\n",
    "ax = plt.gca()\n",
    "ax.tick_params(direction='in')\n",
    "ax.yaxis.set_ticks_position('both')\n",
    "ax.xaxis.set_ticks_position('both')\n",
    "plt.tick_params(direction='in')\n",
    "plt.tick_params(axis='x',labelsize=10)\n",
    "plt.tick_params(axis='y',labelsize=10)\n",
    "\n",
    "plt.legend(loc='upper right', fontsize=8)\n",
    "\n",
    "\n",
    "plt.savefig('../plots/craig-lyne-heating.png',bbox_inches='tight')\n",
    "plt.savefig('../plots/craig-lyne-heating.pdf', dpi=300,bbox_inches='tight')\n",
    "plt.savefig('../plots/craig-lyne-heating.eps', dpi=300,bbox_inches='tight')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The plots are now saved in plots/craig-lyne-* and should match with the results from the paper."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Congratulations!** You have simulated an aerocapture vehicle flying in the Venusian atmosphere. In the next tutorial, we will compute the corridor widths for drag modulation aerocapture at Venus."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
